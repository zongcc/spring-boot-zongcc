<!--
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd ">

    &lt;!&ndash;外在化应用参数配置&ndash;&gt;
    <context:property-placeholder location="classpath*:*.properties"/>

    &lt;!&ndash; 启动SpringMVC的注解功能，完成请求和注解POJO的映射 &ndash;&gt;
    <context:annotation-config />

    &lt;!&ndash;配置扫描路径&ndash;&gt;
    <context:component-scan base-package="com.sohu.sales.up.ads.web"/>

    &lt;!&ndash;配置织入@Aspectj切面,声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面&ndash;&gt;
    <aop:aspectj-autoproxy/>
    &lt;!&ndash;通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller&ndash;&gt;
    &lt;!&ndash;<aop:aspectj-autoproxy proxy-target-class="true" />  &ndash;&gt;

    &lt;!&ndash;自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter两个bean，是spring MVC为@Controllers分发请求所必须的&ndash;&gt;
    &lt;!&ndash;并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）&ndash;&gt;
    <mvc:annotation-driven/>

    &lt;!&ndash;将静态资源的处理经由Spring MVC框架交回Web应用服务器默认Servlet处理&ndash;&gt;
    &lt;!&ndash;一般Web应用服务器默认的Servlet名称是"default"，因此DefaultServletHttpRequestHandler可以找到它，&ndash;&gt;
    &lt;!&ndash;如果你所用的Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定&ndash;&gt;
    &lt;!&ndash;Tomcat, Jetty, JBoss, and GlassFish 自带的默认Servlet的名字"default"&ndash;&gt;
    &lt;!&ndash;Google App Engine 自带的 默认Servlet的名字"_ah_default"&ndash;&gt;
    &lt;!&ndash;Resin 自带的 默认Servlet的名字"resin-file"&ndash;&gt;
    &lt;!&ndash;WebLogic 自带的 默认Servlet的名字"FileServlet"&ndash;&gt;
    &lt;!&ndash;WebSphere  自带的 默认Servlet的名字"SimpleFileServlet"&ndash;&gt;
    &lt;!&ndash;<mvc:default-servlet-handler />&ndash;&gt;

    &lt;!&ndash;将静态资源的处理工作由Spring MVC框架自己处理&ndash;&gt;
    &lt;!&ndash;允许静态资源放在任何地方，如WEB应用根目录下，WEB-INF目录下、类路径下等&ndash;&gt;
    &lt;!&ndash;由于location属性是Resources类型，多个路劲用逗号或者分号隔开&ndash;&gt;
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    <mvc:resources mapping="/h5apps/**" location="/h5apps/"/>

    &lt;!&ndash;拦截器&ndash;&gt;
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/resources/**"/>
            <bean class="com.sohu.sales.up.ads.web.interceptor.XSSInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    &lt;!&ndash;配置视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀&ndash;&gt;
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/page/"/>
        <property name="suffix" value=".jsp"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
    </bean>

    <bean id="uTF8StringHttpMessageConverter" class="com.sohu.sales.up.ads.web.converter.UTF8StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
                <value>application/xml;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    &lt;!&ndash;处理器适配器&ndash;&gt;
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        &lt;!&ndash;配置转换器，用于处理转换json&ndash;&gt;
        <property name="messageConverters">
            <list>
                <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                            <value>application/xml;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                            <value>application/xml;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
            </list>
        </property>

    </bean>

    &lt;!&ndash;用于文件上传的解析器&ndash;&gt;
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

</beans>-->
